{"meta":{"title":"mkdir new day","subtitle":null,"description":null,"author":"liugaoshuai","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"327","slug":"0327","date":"2017-03-27T15:28:03.000Z","updated":"2017-03-27T15:28:03.000Z","comments":true,"path":"2017/03/27/0327/","link":"","permalink":"http://yoursite.com/2017/03/27/0327/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"时间的重要性","slug":"0223","date":"2017-02-23T14:14:28.000Z","updated":"2017-02-23T14:22:10.000Z","comments":true,"path":"2017/02/23/0223/","link":"","permalink":"http://yoursite.com/2017/02/23/0223/","excerpt":"","text":"开始最近状态很差 技术博客又想拿来写心情 明天开始新的工作 又是新的 所有的选择都是新的 如果我能变得更好 就努力一些 保持博客的更新 每天晚上不要烦恼太多 时间会让烦恼过去 人要想开一些 好好生活","categories":[],"tags":[]},{"title":"每天一个算法 - 1 - 去重","slug":"Tran1Day","date":"2017-02-20T13:23:01.000Z","updated":"2017-02-20T13:44:51.000Z","comments":true,"path":"2017/02/20/Tran1Day/","link":"","permalink":"http://yoursite.com/2017/02/20/Tran1Day/","excerpt":"","text":"无序去重12345678910111213141516171819202122232425262728293031323334353637383940// ES6var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];Array.from(new Set(array)); // [1, 2, 3, 5, 9, 8]// ES5var arr = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];uniqueArrayA(arr); // [1, 2, 3, 5, 9, 8]uniqueArrayB(arr); // [1, 2, 3, 5, 9, 8]function uniqueArrayA(arr) &#123; var hashmap = &#123;&#125;; var unique = []; for(var i = 0; i &lt; arr.length; i++) &#123; if(!hashmap.hasOwnProperty([arr[i]])) &#123; //hasOwnProperty() 方法会返回一个布尔值，其用来判断某个对象是否含有指定的属性。 hashmap[arr[i]] = 1; unique.push(arr[i]); &#125; &#125; return unique;&#125;function uniqueArrayB(arr)&#123; var res = [arr[0]]; for(var i = 1; i &lt; arr.length; i++)&#123; var repeat = false; for(var j = 0; j &lt; res.length; j++)&#123; if(arr[i] == res[j])&#123; repeat = true; break; &#125; &#125; if(!repeat)&#123; res.push(arr[i]); &#125; &#125; return res;&#125;","categories":[],"tags":[]},{"title":"跨域 - 常见的三种方法","slug":"0220","date":"2017-02-19T11:24:03.000Z","updated":"2017-02-20T13:20:13.000Z","comments":true,"path":"2017/02/19/0220/","link":"","permalink":"http://yoursite.com/2017/02/19/0220/","excerpt":"","text":"什么是跨域ajax或者iframe所指向的地址中，二级域名、端口、协议必须完全相同，否则就属于跨域访问。 123a.baidu.com访问b.baidu.com 是跨域a.baidu.com:8080访问a.baidu.com:80 是跨域http://a.baidu.com访问https://a.baidu.com 是跨域 解决方法jsonp跨域1234567891011121314$.ajax(&#123; type : &quot;get&quot;, url : &quot;跨域地址&quot;, dataType : &quot;jsonp&quot;, //数据类型为jsonp jsonp: &quot;callback&quot;, //服务端用于接收callback调用的function名的参数 success : function(data)&#123; //结果处理 &#125;, error:function(data)&#123; console.log(data); &#125; &#125;); document.domain浏览器同源策略默认不同的子域属于不同的域，比如baidu.com和map.baidu.com属于不同的域，通过设置主域，浏览器就会认为他们属于同一个域。 1document.domain = &quot;baidu.com&quot; CORS1.前端部分 123456&lt;script type=&quot;text/javascript&quot;&gt; var xhr = new XMLHttpRequest(); //ie6以下用new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);可以做能力判断。 xhr.open(&quot;￼GET&quot;, &quot;http://www.baidu.com/CORS&quot;,true); xhr.send();&lt;/script&gt; 2.后台部分 1Access-Control-Allow-Origin: http://www.baidu.com","categories":[],"tags":[]},{"title":"Node - 爬虫、路由","slug":"Node","date":"2017-02-13T04:07:40.000Z","updated":"2017-02-13T04:08:56.000Z","comments":true,"path":"2017/02/13/Node/","link":"","permalink":"http://yoursite.com/2017/02/13/Node/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Vue-router - 前端控制路由、单页面应用","slug":"Vue2","date":"2017-02-13T02:58:47.000Z","updated":"2017-02-13T04:09:47.000Z","comments":true,"path":"2017/02/13/Vue2/","link":"","permalink":"http://yoursite.com/2017/02/13/Vue2/","excerpt":"","text":"配置环境前提 node npm vue webpack webpack创建项目1234$ vue init webpack my-project$ cd my-project$ npm install$ npm run dev vue-router安装1$ npm install vue-router vue-router全局引入1234567891011// main.jsimport Vue from 'vue'import App from './App'import router from './router'// 全局引入routernew Vue(&#123; el: '#app', router, template: '&lt;App/&gt;', components: &#123; App &#125;&#125;) new Router()1234567891011121314151617181920212223242526272829// router/index.jsimport Vue from 'vue'import Router from 'vue-router'// 引入页面import Hello from 'components/Hello' import Table from 'components/Table'import About from 'components/About'Vue.use(Router)export default new Router(&#123; routes: [ &#123; path: '/', name: 'Hello', component: Hello &#125;, &#123; path: '/table', name: 'Table', component: Table &#125;, &#123; path: '/about', name: 'About', component: About &#125;, ]&#125;) router-view123// app.vue// router-view路由视图&lt;router-view&gt;&lt;/router-view&gt; router-link12345// app.vue// router-link链接路由&lt;router-link class=\"nav_li\" to=\"/\"&gt;Home&lt;/router-link&gt;&lt;router-link class=\"nav_li\" to=\"/table\"&gt;Table&lt;/router-link&gt;&lt;router-link class=\"nav_li\" to=\"/about\"&gt;About&lt;/router-link&gt;","categories":[],"tags":[]},{"title":"Vue - api入门","slug":"Vue","date":"2017-02-12T16:06:34.000Z","updated":"2017-02-13T02:57:31.000Z","comments":true,"path":"2017/02/13/Vue/","link":"","permalink":"http://yoursite.com/2017/02/13/Vue/","excerpt":"","text":"全局APIVue.extend()基础Vue构造器 1&lt;div id=&quot;element&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt; 12345678var profile = Vue.extend(&#123; el: &apos;#element&apos; data: function()&#123; return &#123; message: &apos;hello world&apos; &#125; &#125;&#125;) Vue.component()注册或获取全局组件 1234&lt;!-- 注册组件 --&gt;Vue.component&#123;&apos;my-component&apos;,Vue.extend(&#123;...&#125;)&#125;&lt;!-- 获取组件 --&gt;var Component = Vue.component&#123;&apos;my-component&apos;&#125; Vue.use()安装Vue.js插件 12&lt;!-- 安装router插件 --&gt;Vue.use(&apos;router&apos;) 选项/数据data数据对象 12345678&lt;!-- 在Vue.extend实例中 data必须是函数 --&gt;var Component = Vue.extend(&#123; data: function()&#123; return &#123; a: 1, &#125; &#125;&#125;) props传递父组件的数据，单项绑定 12345var Component = Vue.component(&apos;my-component&apos;,&#123; props: &#123; message: &apos;hello world&apos; &#125;&#125;) 1&lt;my-component&gt;&#123;&#123; message &#125;&#125;&lt;/my-component&gt; methods方法与事件处理12345678910var vm = new Vue(&#123; data: &#123;a: 1&#125;, methods: &#123; add: function()&#123; this.a++ &#125; &#125;&#125;)vm.add();vm.a // 2 el挂载页面DOM元素 实例生命周期 Vue2.0 Description beforeCreate 组件实例刚被创建，组件属性计算之前，如el属性等 created 组件实例创建完成，属性已绑定，DOM未生成 beforeMount 模板编译/挂载之前 mounted 模板编译/挂载之后 beforeUpdate 组件更新之前 updated 组件更新之后 beforeDestory 组件销毁前 destoryed 组件销毁后 指令v-show根据表达式真假，切换元素的display v-if根据表达式的值的真假，决定是否渲染元素 v-for根据数据渲染元素，语法alias in expression v-on绑定事件，缩写@ 123456789101112131415161718&lt;!-- 方法处理器 --&gt;&lt;button v-on:click=\"doThis\"&gt;&lt;/button&gt;&lt;!-- 内联语句 --&gt;&lt;button v-on:click=\"doThat('hello', $event)\"&gt;&lt;/button&gt;&lt;!-- 缩写 --&gt;&lt;button @click=\"doThis\"&gt;&lt;/button&gt;&lt;!-- 停止冒泡 --&gt;&lt;button @click.stop=\"doThis\"&gt;&lt;/button&gt;&lt;!-- 阻止默认行为 --&gt;&lt;button @click.prevent=\"doThis\"&gt;&lt;/button&gt;&lt;!-- 阻止默认行为，没有表达式 --&gt;&lt;form @submit.prevent&gt;&lt;/form&gt;&lt;!-- 串联修饰符 --&gt;&lt;button @click.stop.prevent=\"doThis\"&gt;&lt;/button&gt;&lt;!-- 键修饰符，键别名 --&gt;&lt;input @keyup.enter=\"onEnter\"&gt;&lt;!-- 键修饰符，键代码 --&gt;&lt;input @keyup.13=\"onEnter\"&gt; v-bind绑定DOM属性，缩写: v-model表单数据绑定 .lazy - 取代 input 监听 change 事件 .number - 输入字符串转为数字 .trim - 输入首尾空格过滤","categories":[],"tags":[]},{"title":"Hexo - 简洁、高效的博客框架","slug":"Hexo","date":"2017-02-12T15:27:44.000Z","updated":"2017-02-13T02:54:56.000Z","comments":true,"path":"2017/02/12/Hexo/","link":"","permalink":"http://yoursite.com/2017/02/12/Hexo/","excerpt":"","text":"安装配置安装Hexo前提 Node Git 安装hexo1$ npm install -g hexo-cli 创建项目123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;npm install hexo博客新建文章1$ hexo new [layout] &lt;title&gt; 生成静态文件123$ hexo generate//简写$ hexo g 部署网站123$ hexo deploy//简写$ hexo d 启动服务器默认端口为4000123$ hexo server//简写$ hexo s 清除静态文件缓存1$ hexo clean 安装Next主题1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题，更改系统配置文件1theme: next hexo根目录下_config.yml为系统配置文件主题根目录下_config.yml为主题配置文件 上传代码至GitHub安装hexo-deploy-git插件，用于提交代码到GitHub 绑定GitHub地址，更改系统配置文件1234deploy type：git repo：https://github.com/liugaoshuai/liugaoshuai.github.io.git branch：master 提交代码1$ hexo deploy","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-02-12T13:33:30.000Z","updated":"2017-02-12T13:33:30.000Z","comments":true,"path":"2017/02/12/hello-world/","link":"","permalink":"http://yoursite.com/2017/02/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}